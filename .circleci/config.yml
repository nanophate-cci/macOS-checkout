version: 2.1

orbs:
  macos: circleci/macos@2.5.4

jobs:
  mac-os:
    parameters:
      resource_class:
        default: "m4pro.medium"
        type: string
    macos:
      xcode: 16.4.0
    resource_class: << parameters.resource_class >>
    steps:

      - run:
          name: Create diagnostics directory
          command: mkdir -p ~/diagnostics

      - run:
          name: Smart network path analysis
          when: always
          command: |
            echo "=== Network Path Analysis ===" | tee ~/diagnostics/network_path_analysis.txt
            echo "Resource Class: << parameters.resource_class >>" | tee -a ~/diagnostics/network_path_analysis.txt
            
            # Get our IP without rate-limited service
            MY_IP=$(curl -s ifconfig.me || curl -s icanhazip.com || curl -s checkip.amazonaws.com || echo "IP lookup failed")
            echo "Instance IP: $MY_IP" | tee -a ~/diagnostics/network_path_analysis.txt
            
            # Run traceroute
            echo -e "\n=== Traceroute to GitHub ===" | tee -a ~/diagnostics/network_path_analysis.txt
            traceroute -n -m 15 github.com 2>&1 | tee ~/diagnostics/traceroute_raw.txt || true
            
            # Extract public IPs (excluding private and AWS internal)
            echo -e "\n=== Analyzing Route IPs ===" | tee -a ~/diagnostics/network_path_analysis.txt
            
            # Get IPs and analyze
            grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' ~/diagnostics/traceroute_raw.txt | \
              grep -v '^192\.168\.' | grep -v '^10\.' | grep -v '^172\.' | \
              grep -v '^240\.' | sort -u > ~/diagnostics/public_ips.txt || true
            
            # Analyze each IP
            while read -r ip; do
              if [ ! -z "$ip" ]; then
                echo -e "\n--- Checking $ip ---" | tee -a ~/diagnostics/network_path_analysis.txt
                
                # Try multiple sources for IP info
                # First, try ipinfo.io (better for AS info)
                curl -s "https://ipinfo.io/$ip" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    print(f'  Location: {data.get(\"city\", \"Unknown\")}, {data.get(\"region\", \"Unknown\")}, {data.get(\"country\", \"Unknown\")}')
    print(f'  Org: {data.get(\"org\", \"Unknown\")}')
    print(f'  AS: {data.get(\"as\", \"Unknown\")}')
except: pass
" 2>/dev/null || echo "  Failed to get info for $ip"
              fi
            done < ~/diagnostics/public_ips.txt || true
            
            # Check for European routing indicators
            echo -e "\n=== Route Analysis Summary ===" | tee -a ~/diagnostics/network_path_analysis.txt
            
            # Look for Telia (AS1299) or high latency jumps
            if grep -q "62\.115\." ~/diagnostics/traceroute_raw.txt 2>/dev/null; then
              echo "⚠️  EUROPEAN ROUTING DETECTED: Telia backbone (62.115.x.x)" | tee -a ~/diagnostics/network_path_analysis.txt
            fi
            
            if grep -q "213\.248\." ~/diagnostics/traceroute_raw.txt 2>/dev/null; then
              echo "⚠️  EUROPEAN ROUTING DETECTED: EU transit network (213.248.x.x)" | tee -a ~/diagnostics/network_path_analysis.txt
            fi
            
            # Check latency jumps
            echo -e "\n=== Latency Analysis ===" | tee -a ~/diagnostics/network_path_analysis.txt
            awk '/ms/ {
              for(i=1; i<=NF; i++) {
                if($i ~ /ms$/) {
                  gsub(/ms/, "", $i)
                  if($i > 10) {
                    print "High latency detected at hop " NR ": " $i "ms"
                  }
                }
              }
            }' ~/diagnostics/traceroute_raw.txt 2>/dev/null || echo "No latency analysis available"
            
            # Always exit successfully
            exit 0

      - run:
          name: AWS region detection
          when: always
          command: |
            echo "=== AWS Region Detection ===" | tee ~/diagnostics/aws_region.txt
            
            # Try to detect AWS region from metadata (if available)
            curl -s --max-time 2 http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null | tee -a ~/diagnostics/aws_region.txt || \
              echo "Not in AWS or metadata not accessible" | tee -a ~/diagnostics/aws_region.txt
            
            echo -e "\n=== Latency to AWS Regions ===" | tee -a ~/diagnostics/aws_region.txt
            
            # Test major regions
            for region in us-east-1 us-west-2 eu-west-1 eu-central-1; do
              echo -e "\n--- Testing $region ---" | tee -a ~/diagnostics/aws_region.txt
              ping -c 3 -W 2 ec2.$region.amazonaws.com 2>&1 | grep -E "round-trip|time=" | tee -a ~/diagnostics/aws_region.txt || echo "Failed to ping $region"
            done
            
            # Find closest region
            echo -e "\n=== Closest AWS Region ===" | tee -a ~/diagnostics/aws_region.txt
            grep "round-trip" ~/diagnostics/aws_region.txt 2>/dev/null | sort -t'=' -k4 -n | head -1 || echo "Could not determine closest region"
            
            # Always succeed
            exit 0

      - run:
          name: Compare with known problematic IPs
          when: always
          command: |
            echo "=== Checking for Known Issues ===" | tee ~/diagnostics/known_issues.txt
            
            # Check our route
            if [ -f ~/diagnostics/traceroute_raw.txt ]; then
              # Look for known problematic networks
              if grep -q "62\.115\." ~/diagnostics/traceroute_raw.txt 2>/dev/null; then
                echo "Found 62.115.x.x: Telia Europe (causes trans-Atlantic routing)" | tee -a ~/diagnostics/known_issues.txt
              fi
              
              if grep -q "213\.248\." ~/diagnostics/traceroute_raw.txt 2>/dev/null; then
                echo "Found 213.248.x.x: European transit network" | tee -a ~/diagnostics/known_issues.txt
              fi
              
              if grep -q "240\.3\." ~/diagnostics/traceroute_raw.txt 2>/dev/null; then
                echo "Found 240.3.x.x: AWS internal (good)" | tee -a ~/diagnostics/known_issues.txt
              fi
              
              if grep -q "151\.148\." ~/diagnostics/traceroute_raw.txt 2>/dev/null; then
                echo "Found 151.148.x.x: AWS US-East (good)" | tee -a ~/diagnostics/known_issues.txt
              fi
              
              if grep -q "52\.46\." ~/diagnostics/traceroute_raw.txt 2>/dev/null; then
                echo "Found 52.46.x.x: AWS US-East (good)" | tee -a ~/diagnostics/known_issues.txt
              fi
              
              if grep -q "38\.23\." ~/diagnostics/traceroute_raw.txt 2>/dev/null; then
                echo "Found 38.23.x.x: Cogent Communications" | tee -a ~/diagnostics/known_issues.txt
              fi
            else
              echo "No traceroute data available" | tee -a ~/diagnostics/known_issues.txt
            fi
            
            # Final verdict
            echo -e "\n=== Routing Verdict ===" | tee -a ~/diagnostics/known_issues.txt
            if grep -q "Telia Europe\|European transit" ~/diagnostics/known_issues.txt 2>/dev/null; then
              echo "❌ BAD ROUTING: Traffic goes through Europe to reach GitHub" | tee -a ~/diagnostics/known_issues.txt
              echo "   This causes ~10x latency and bandwidth constraints" | tee -a ~/diagnostics/known_issues.txt
            else
              echo "✅ GOOD ROUTING: Direct path to GitHub" | tee -a ~/diagnostics/known_issues.txt
            fi
            
            # Always succeed
            exit 0

      - run:
          name: Geographic latency test
          command: |
            echo "=== Geographic Latency Test ===" | tee ~/diagnostics/geo_latency.txt
            
            # Test latency to different regions
            echo -e "\n--- US East (Virginia) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.us-east-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            echo -e "\n--- US West (California) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.us-west-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            echo -e "\n--- Europe (Ireland) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.eu-west-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            echo -e "\n--- Europe (Frankfurt) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.eu-central-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            echo -e "\n--- Asia Pacific (Tokyo) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.ap-northeast-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            # Check which region we're closest to
            echo -e "\n=== Latency Summary ===" | tee -a ~/diagnostics/geo_latency.txt
            grep -E "round-trip|avg" ~/diagnostics/geo_latency.txt | tee -a ~/diagnostics/geo_latency_summary.txt || true

      - run:
          name: Simple IP geolocation check
          command: |
            echo "=== Quick IP Location Check ===" | tee ~/diagnostics/ip_locations.txt
            
            # Our IP
            MY_IP=$(curl -s ifconfig.me)
            echo -e "\nOur IP: $MY_IP" | tee -a ~/diagnostics/ip_locations.txt
            curl -s "https://ipapi.co/$MY_IP/json/" | python3 -m json.tool | tee -a ~/diagnostics/ip_locations.txt
            
            # Check suspicious IPs from M4 Pro route
            for ip in 62.115.40.30 213.248.67.47; do
              echo -e "\n\nChecking $ip:" | tee -a ~/diagnostics/ip_locations.txt
              curl -s "https://ipapi.co/$ip/json/" | python3 -m json.tool | tee -a ~/diagnostics/ip_locations.txt || \
                echo "Failed to lookup $ip" | tee -a ~/diagnostics/ip_locations.txt
            done
      
      - run:
          name: Pre-checkout network diagnostics
          command: |
            echo "=== Resource Class: << parameters.resource_class >> ===" | tee ~/diagnostics/pre_checkout_info.txt
            echo "=== Date: $(date) ===" | tee -a ~/diagnostics/pre_checkout_info.txt
            
            # System info
            sysctl machdep.cpu.brand_string | tee -a ~/diagnostics/pre_checkout_info.txt
            sw_vers | tee -a ~/diagnostics/pre_checkout_info.txt
            
            # Network interfaces
            ifconfig -a | tee -a ~/diagnostics/pre_checkout_info.txt
            networksetup -listallnetworkservices | tee -a ~/diagnostics/pre_checkout_info.txt
            
            # MTU settings
            networksetup -getMTU en0 | tee -a ~/diagnostics/pre_checkout_info.txt
            
            # DNS and routing
            cat /etc/resolv.conf | tee -a ~/diagnostics/pre_checkout_info.txt
            netstat -nr | tee -a ~/diagnostics/pre_checkout_info.txt
            scutil --proxy | tee -a ~/diagnostics/pre_checkout_info.txt
            
            # TCP settings
            sysctl net.inet.tcp | tee -a ~/diagnostics/pre_checkout_info.txt
            
            # Initial network stats
            netstat -s -p tcp | tee -a ~/diagnostics/pre_checkout_info.txt
            netstat -i | tee -a ~/diagnostics/pre_checkout_info.txt

      - run:
          name: DNS resolution test
          command: |
            # Test DNS resolution time
            { time nslookup github.com; } 2>&1 | tee ~/diagnostics/dns_test.txt
            { time nslookup github.com 8.8.8.8; } 2>&1 | tee -a ~/diagnostics/dns_test.txt

      - run:
          name: Start detailed tcpdump
          command: |
            # Capture with more details and filters
            # Using timeout to auto-stop after a reasonable time (5 minutes)
            sudo timeout 300 tcpdump -i any -n -v -s 0 \
              '(host github.com or host 140.82.114.4 or host 140.82.113.4 or host 140.82.112.4 or host 140.82.114.3) and (port 22 or port 443)' \
              -w ~/diagnostics/github_traffic.pcap 2>&1 | tee ~/diagnostics/tcpdump.log &
            echo $! > ~/diagnostics/tcpdump.pid
          background: true

      - run:
          name: Start network monitoring
          command: |
            # Create monitor script
            echo '#!/bin/bash' > ~/diagnostics/monitor.sh
            echo 'while true; do' >> ~/diagnostics/monitor.sh
            echo '  echo "=== $(date) ===" >> ~/diagnostics/network_monitor.log' >> ~/diagnostics/monitor.sh
            echo '  netstat -I en0 | tail -1 >> ~/diagnostics/network_monitor.log' >> ~/diagnostics/monitor.sh
            echo '  netstat -s -p tcp | grep -E "retransmit|timeout|reset|duplicate" >> ~/diagnostics/network_monitor.log' >> ~/diagnostics/monitor.sh
            echo '  echo "" >> ~/diagnostics/network_monitor.log' >> ~/diagnostics/monitor.sh
            echo '  sleep 2' >> ~/diagnostics/monitor.sh
            echo 'done' >> ~/diagnostics/monitor.sh
            
            chmod +x ~/diagnostics/monitor.sh
            timeout 300 ~/diagnostics/monitor.sh &
            echo $! > ~/diagnostics/monitor.pid
          background: true

      - run:
          name: HTTP/HTTPS speed test
          command: |
            echo "=== HTTPS Speed Test ===" | tee ~/diagnostics/speed_test.txt
            curl -o /dev/null -w "DNS Lookup: %{time_namelookup}s\nConnect: %{time_connect}s\nSSL Handshake: %{time_appconnect}s\nStart Transfer: %{time_starttransfer}s\nTotal: %{time_total}s\nSpeed: %{speed_download} bytes/sec\n" \
              https://github.com 2>&1 | tee -a ~/diagnostics/speed_test.txt

      - run:
          name: Start checkout timer
          command: date +%s > ~/diagnostics/checkout_start.txt

      - checkout

      - run:
          name: End checkout timer
          command: |
            START=$(cat ~/diagnostics/checkout_start.txt)
            END=$(date +%s)
            DURATION=$((END - START))
            echo "Checkout duration: $DURATION seconds" | tee ~/diagnostics/checkout_duration.txt

      - run:
          name: Post-checkout diagnostics
          command: |
            # Wait a moment for any final packets
            sleep 2
            
            # Gracefully stop tcpdump by sending SIGTERM to the timeout process
            if [ -f ~/diagnostics/tcpdump.pid ]; then
              TCPDUMP_PID=$(cat ~/diagnostics/tcpdump.pid)
              # Find the actual tcpdump process (child of timeout)
              ACTUAL_TCPDUMP_PID=$(pgrep -P $TCPDUMP_PID tcpdump || echo "")
              if [ -n "$ACTUAL_TCPDUMP_PID" ]; then
                sudo kill -TERM $ACTUAL_TCPDUMP_PID 2>/dev/null || true
              fi
              kill -TERM $TCPDUMP_PID 2>/dev/null || true
              sleep 1
            fi
            
            # Stop monitor script
            if [ -f ~/diagnostics/monitor.pid ]; then
              kill -TERM $(cat ~/diagnostics/monitor.pid) 2>/dev/null || true
            fi
            
            # Collect final stats
            netstat -s -p tcp | tee -a ~/diagnostics/post_checkout_info.txt
            netstat -i | tee -a ~/diagnostics/post_checkout_info.txt
            
            # Analyze tcpdump if file exists and is valid
            if [ -f ~/diagnostics/github_traffic.pcap ] && [ -s ~/diagnostics/github_traffic.pcap ]; then
              echo "=== Packet Summary ===" | tee -a ~/diagnostics/post_checkout_info.txt
              sudo tcpdump -r ~/diagnostics/github_traffic.pcap -nn 2>/dev/null | wc -l | tee -a ~/diagnostics/post_checkout_info.txt || echo "0 packets captured"
              
              echo -e "\n=== TCP Flags Summary ===" | tee -a ~/diagnostics/post_checkout_info.txt
              sudo tcpdump -r ~/diagnostics/github_traffic.pcap -nn 2>/dev/null | grep -E "Flags \[" | head -20 | tee -a ~/diagnostics/post_checkout_info.txt || true
              
              echo -e "\n=== Connection Summary ===" | tee -a ~/diagnostics/post_checkout_info.txt
              sudo tcpdump -r ~/diagnostics/github_traffic.pcap -nn -q 2>/dev/null | head -50 | tee -a ~/diagnostics/post_checkout_info.txt || true
            else
              echo "No valid pcap file found or file is empty" | tee ~/diagnostics/post_checkout_info.txt
            fi

      - run:
          name: Generate summary report
          command: |
            echo "=== Network Diagnostics Summary ===" > ~/diagnostics/summary.txt
            echo "Resource Class: << parameters.resource_class >>" >> ~/diagnostics/summary.txt
            echo "Date: $(date)" >> ~/diagnostics/summary.txt
            echo "" >> ~/diagnostics/summary.txt
            echo "Checkout Duration: $(cat ~/diagnostics/checkout_duration.txt)" >> ~/diagnostics/summary.txt
            echo "" >> ~/diagnostics/summary.txt
            echo "=== TCP Statistics Diff ===" >> ~/diagnostics/summary.txt
            
            # Compare before/after TCP stats
            diff ~/diagnostics/pre_checkout_info.txt ~/diagnostics/post_checkout_info.txt >> ~/diagnostics/summary.txt || true
            
            echo -e "\n=== Key Metrics ===" >> ~/diagnostics/summary.txt
            grep -E "retransmit|timeout|duplicate" ~/diagnostics/post_checkout_info.txt >> ~/diagnostics/summary.txt || true

      - run:
          name: Create comprehensive report for engineering
          command: |
            cat > ~/diagnostics/ENGINEERING_REPORT.txt << 'EOF'
            # CircleCI M4 Pro Network Routing Issue Report
            
            ## Executive Summary
            M4 Pro instances route through Europe to reach GitHub, causing 14x slower performance.
            
            ## Test Results
            EOF
            
            echo "### Resource Class: << parameters.resource_class >>" >> ~/diagnostics/ENGINEERING_REPORT.txt
            echo "Date: $(date)" >> ~/diagnostics/ENGINEERING_REPORT.txt
            echo "" >> ~/diagnostics/ENGINEERING_REPORT.txt
            
            # Add checkout duration
            if [ -f ~/diagnostics/checkout_duration.txt ]; then
              cat ~/diagnostics/checkout_duration.txt >> ~/diagnostics/ENGINEERING_REPORT.txt
            fi
            
            # Add routing verdict
            if [ -f ~/diagnostics/known_issues.txt ]; then
              echo -e "\n### Routing Analysis" >> ~/diagnostics/ENGINEERING_REPORT.txt
              tail -5 ~/diagnostics/known_issues.txt >> ~/diagnostics/ENGINEERING_REPORT.txt
            fi
            
            # Add traceroute
            if [ -f ~/diagnostics/traceroute_raw.txt ]; then
              echo -e "\n### Traceroute Output" >> ~/diagnostics/ENGINEERING_REPORT.txt
              echo '```' >> ~/diagnostics/ENGINEERING_REPORT.txt
              cat ~/diagnostics/traceroute_raw.txt >> ~/diagnostics/ENGINEERING_REPORT.txt
              echo '```' >> ~/diagnostics/ENGINEERING_REPORT.txt
            fi
            
            # Add latency summary
            if [ -f ~/diagnostics/geo_latency_summary.txt ]; then
              echo -e "\n### Regional Latency" >> ~/diagnostics/ENGINEERING_REPORT.txt
              cat ~/diagnostics/geo_latency_summary.txt >> ~/diagnostics/ENGINEERING_REPORT.txt
            fi
            
            # Add network path analysis
            if [ -f ~/diagnostics/network_path_analysis.txt ]; then
              echo -e "\n### Network Path Details" >> ~/diagnostics/ENGINEERING_REPORT.txt
              grep -A5 "Route Analysis Summary" ~/diagnostics/network_path_analysis.txt >> ~/diagnostics/ENGINEERING_REPORT.txt
            fi

      - run:
          name: Create comparison data
          when: always
          command: |
            # Create JSON summary for easy comparison
            cat > ~/diagnostics/summary.json << EOF
            {
              "resource_class": "<< parameters.resource_class >>",
              "checkout_seconds": $(grep -oE '[0-9]+' ~/diagnostics/checkout_duration.txt || echo "null"),
              "ip_address": "$(curl -s ifconfig.me)",
              "closest_aws_region": "$(grep -m1 "round-trip" ~/diagnostics/aws_region.txt | cut -d' ' -f3 || echo "unknown")",
              "has_european_routing": $(grep -q "EUROPEAN ROUTING DETECTED" ~/diagnostics/network_path_analysis.txt && echo "true" || echo "false"),
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            }
            EOF

      - store_artifacts:
          path: ~/diagnostics
          destination: network-diagnostics

      - run:
          name: Check system logs (limited)
          command: |
            # Only recent logs to avoid too much data
            sudo tail -1000 /private/var/log/system.log > ~/diagnostics/system.log 2>/dev/null || true
            sudo tail -1000 /private/var/log/wifi.log > ~/diagnostics/wifi.log 2>/dev/null || true

workflows:
  workflow-mac:
    jobs:
      - mac-os:
          matrix:
            parameters:
              resource_class: ["macos.m1.medium.gen1", "m2pro.medium", "m2pro.large", "m4pro.medium"]