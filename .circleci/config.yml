version: 2.1

orbs:
  macos: circleci/macos@2.5.4

jobs:
  mac-os:
    parameters:
      resource_class:
        default: "m4pro.medium"
        type: string
    macos:
      xcode: 16.4.0
    resource_class: << parameters.resource_class >>
    steps:

      - run:
          name: Create diagnostics directory
          command: mkdir -p ~/diagnostics

      - run:
          name: Network path verification with whois
          when: always
          command: |
            echo "=== Network Path Analysis ===" | tee ~/diagnostics/network_path_analysis.txt
            
            # Get our current location
            echo -e "\n=== Current Instance Location ===" | tee -a ~/diagnostics/network_path_analysis.txt
            curl -s https://ipapi.co/json | python3 -m json.tool | tee -a ~/diagnostics/network_path_analysis.txt || \
              curl -s https://ipapi.co/json | tee -a ~/diagnostics/network_path_analysis.txt
            
            # Run traceroute and capture IPs
            echo -e "\n=== Traceroute to GitHub ===" | tee -a ~/diagnostics/network_path_analysis.txt
            traceroute -n -m 15 github.com 2>&1 | tee ~/diagnostics/traceroute_raw.txt
            
            # Extract unique IPs from traceroute (excluding private IPs)
            echo -e "\n=== Whois Analysis of Route ===" | tee -a ~/diagnostics/network_path_analysis.txt
            
            # Parse traceroute and get IPs
            cat ~/diagnostics/traceroute_raw.txt | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | \
              grep -v '^192\.168\.' | grep -v '^10\.' | grep -v '^172\.' | \
              sort -u > ~/diagnostics/public_ips.txt
            
            # Run whois on each IP
            while read -r ip; do
              if [ ! -z "$ip" ]; then
                echo -e "\n--- Whois for $ip ---" | tee -a ~/diagnostics/network_path_analysis.txt
                whois "$ip" 2>/dev/null | grep -E "^(OrgName:|org-name:|netname:|NetName:|country:|Country:|address:|Address:|descr:|OrgTechCity:|City:)" | \
                  head -10 | tee -a ~/diagnostics/network_path_analysis.txt || echo "Whois lookup failed for $ip"
              fi
            done < ~/diagnostics/public_ips.txt
            
            # Specific checks for key IPs we've seen
            echo -e "\n=== Detailed Analysis of Key IPs ===" | tee -a ~/diagnostics/network_path_analysis.txt
            
            # For M4 Pro suspicious IPs
            for ip in 62.115.40.30 62.115.136.201 213.248.67.47 38.23.49.203; do
              echo -e "\n--- Detailed check for $ip ---" | tee -a ~/diagnostics/network_path_analysis.txt
              whois "$ip" 2>/dev/null | grep -E "(OrgName|Country|NetRange|CIDR|abuse|tech-c)" | \
                grep -v "^#" | head -15 | tee -a ~/diagnostics/network_path_analysis.txt
            done
            
            # Check GitHub's IP
            echo -e "\n=== GitHub Server Location ===" | tee -a ~/diagnostics/network_path_analysis.txt
            GITHUB_IP=$(nslookup github.com | grep -A1 "Non-authoritative" | tail -1 | awk '{print $2}')
            echo "GitHub IP: $GITHUB_IP" | tee -a ~/diagnostics/network_path_analysis.txt
            whois "$GITHUB_IP" 2>/dev/null | grep -E "(OrgName|Country|City|Address)" | \
              head -10 | tee -a ~/diagnostics/network_path_analysis.txt
            
            # AS Path analysis with sudo mtr (if available)
            echo -e "\n=== AS Path Analysis ===" | tee -a ~/diagnostics/network_path_analysis.txt
            
            # Try mtr with sudo
            if which mtr > /dev/null; then
              echo "Running mtr with sudo..." | tee -a ~/diagnostics/network_path_analysis.txt
              sudo mtr -r -c 5 -w -b github.com 2>&1 | tee -a ~/diagnostics/network_path_analysis.txt || \
                echo "mtr failed even with sudo, skipping" | tee -a ~/diagnostics/network_path_analysis.txt
            else
              echo "mtr not available" | tee -a ~/diagnostics/network_path_analysis.txt
            fi
            
            # Alternative: Use traceroute with AS lookup
            echo -e "\n=== Alternative AS Path lookup ===" | tee -a ~/diagnostics/network_path_analysis.txt
            traceroute -n -A github.com 2>&1 | head -20 | tee -a ~/diagnostics/network_path_analysis.txt || true

      - run:
          name: Geographic latency test
          command: |
            echo "=== Geographic Latency Test ===" | tee ~/diagnostics/geo_latency.txt
            
            # Test latency to different regions
            echo -e "\n--- US East (Virginia) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.us-east-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            echo -e "\n--- US West (California) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.us-west-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            echo -e "\n--- Europe (Ireland) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.eu-west-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            echo -e "\n--- Europe (Frankfurt) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.eu-central-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            echo -e "\n--- Asia Pacific (Tokyo) ---" | tee -a ~/diagnostics/geo_latency.txt
            ping -c 5 ec2.ap-northeast-1.amazonaws.com 2>&1 | tee -a ~/diagnostics/geo_latency.txt || true
            
            # Check which region we're closest to
            echo -e "\n=== Latency Summary ===" | tee -a ~/diagnostics/geo_latency.txt
            grep -E "round-trip|avg" ~/diagnostics/geo_latency.txt | tee -a ~/diagnostics/geo_latency_summary.txt || true

      - run:
          name: Simple IP geolocation check
          command: |
            echo "=== Quick IP Location Check ===" | tee ~/diagnostics/ip_locations.txt
            
            # Our IP
            MY_IP=$(curl -s ifconfig.me)
            echo -e "\nOur IP: $MY_IP" | tee -a ~/diagnostics/ip_locations.txt
            curl -s "https://ipapi.co/$MY_IP/json/" | python3 -m json.tool | tee -a ~/diagnostics/ip_locations.txt
            
            # Check suspicious IPs from M4 Pro route
            for ip in 62.115.40.30 213.248.67.47; do
              echo -e "\n\nChecking $ip:" | tee -a ~/diagnostics/ip_locations.txt
              curl -s "https://ipapi.co/$ip/json/" | python3 -m json.tool | tee -a ~/diagnostics/ip_locations.txt || \
                echo "Failed to lookup $ip" | tee -a ~/diagnostics/ip_locations.txt
            done
      
      - run:
          name: Pre-checkout network diagnostics
          command: |
            echo "=== Resource Class: << parameters.resource_class >> ===" | tee ~/diagnostics/resource_info.txt
            echo "=== Date: $(date) ===" | tee -a ~/diagnostics/resource_info.txt
            
            # System info
            sysctl machdep.cpu.brand_string | tee -a ~/diagnostics/system_info.txt
            sw_vers | tee -a ~/diagnostics/system_info.txt
            
            # Network interfaces
            ifconfig -a | tee ~/diagnostics/ifconfig.txt
            networksetup -listallnetworkservices | tee ~/diagnostics/network_services.txt
            
            # MTU settings
            networksetup -getMTU en0 | tee ~/diagnostics/mtu_info.txt
            
            # DNS and routing
            cat /etc/resolv.conf | tee ~/diagnostics/resolv.txt
            netstat -nr | tee ~/diagnostics/routes.txt
            scutil --proxy | tee ~/diagnostics/proxy_settings.txt
            
            # TCP settings
            sysctl net.inet.tcp | tee ~/diagnostics/tcp_settings.txt
            
            # Initial network stats
            netstat -s -p tcp | tee ~/diagnostics/tcp_stats_before.txt
            netstat -i | tee ~/diagnostics/interface_stats_before.txt

      - run:
          name: DNS resolution test
          command: |
            # Test DNS resolution time
            { time nslookup github.com; } 2>&1 | tee ~/diagnostics/dns_test.txt
            { time nslookup github.com 8.8.8.8; } 2>&1 | tee -a ~/diagnostics/dns_test.txt

      - run:
          name: Start detailed tcpdump
          command: |
            # Capture with more details and filters
            # Using timeout to auto-stop after a reasonable time (5 minutes)
            sudo timeout 300 tcpdump -i any -n -v -s 0 \
              '(host github.com or host 140.82.114.4 or host 140.82.113.4 or host 140.82.112.4 or host 140.82.114.3) and (port 22 or port 443)' \
              -w ~/diagnostics/github_traffic.pcap 2>&1 | tee ~/diagnostics/tcpdump.log &
            echo $! > ~/diagnostics/tcpdump.pid
          background: true

      - run:
          name: Start network monitoring
          command: |
            # Create monitor script
            echo '#!/bin/bash' > ~/diagnostics/monitor.sh
            echo 'while true; do' >> ~/diagnostics/monitor.sh
            echo '  echo "=== $(date) ===" >> ~/diagnostics/network_monitor.log' >> ~/diagnostics/monitor.sh
            echo '  netstat -I en0 | tail -1 >> ~/diagnostics/network_monitor.log' >> ~/diagnostics/monitor.sh
            echo '  netstat -s -p tcp | grep -E "retransmit|timeout|reset|duplicate" >> ~/diagnostics/network_monitor.log' >> ~/diagnostics/monitor.sh
            echo '  echo "" >> ~/diagnostics/network_monitor.log' >> ~/diagnostics/monitor.sh
            echo '  sleep 2' >> ~/diagnostics/monitor.sh
            echo 'done' >> ~/diagnostics/monitor.sh
            
            chmod +x ~/diagnostics/monitor.sh
            timeout 300 ~/diagnostics/monitor.sh &
            echo $! > ~/diagnostics/monitor.pid
          background: true

      # Commented out as requested
      # - run:
      #     name: GitHub connectivity tests
      #     command: |
      #       echo "=== Ping Test ===" | tee ~/diagnostics/ping_test.txt
      #       ping -c 10 github.com | tee -a ~/diagnostics/ping_test.txt || true
      #       
      #       echo -e "\n=== MTU Discovery ===" | tee -a ~/diagnostics/mtu_test.txt
      #       for size in 1500 1492 1480 1472 1464 1436; do
      #         echo "Testing MTU size $size:" | tee -a ~/diagnostics/mtu_test.txt
      #         ping -c 3 -D -s $size github.com 2>&1 | tee -a ~/diagnostics/mtu_test.txt || true
      #       done
      #       
      #       echo -e "\n=== Traceroute ===" | tee ~/diagnostics/traceroute.txt
      #       traceroute -n -m 20 github.com | tee -a ~/diagnostics/traceroute.txt || true
      #       
      #       echo -e "\n=== SSH Test ===" | tee ~/diagnostics/ssh_test.txt
      #       ssh -vvv -o ConnectTimeout=10 -o StrictHostKeyChecking=no git@github.com 2>&1 | tee -a ~/diagnostics/ssh_test.txt || true

      - run:
          name: HTTP/HTTPS speed test
          command: |
            echo "=== HTTPS Speed Test ===" | tee ~/diagnostics/speed_test.txt
            curl -o /dev/null -w "DNS Lookup: %{time_namelookup}s\nConnect: %{time_connect}s\nSSL Handshake: %{time_appconnect}s\nStart Transfer: %{time_starttransfer}s\nTotal: %{time_total}s\nSpeed: %{speed_download} bytes/sec\n" \
              https://github.com 2>&1 | tee -a ~/diagnostics/speed_test.txt

      - run:
          name: Start checkout timer
          command: date +%s > ~/diagnostics/checkout_start.txt

      - checkout

      - run:
          name: End checkout timer
          command: |
            START=$(cat ~/diagnostics/checkout_start.txt)
            END=$(date +%s)
            DURATION=$((END - START))
            echo "Checkout duration: $DURATION seconds" | tee ~/diagnostics/checkout_duration.txt

      - run:
          name: Post-checkout diagnostics
          command: |
            # Wait a moment for any final packets
            sleep 2
            
            # Gracefully stop tcpdump by sending SIGTERM to the timeout process
            if [ -f ~/diagnostics/tcpdump.pid ]; then
              TCPDUMP_PID=$(cat ~/diagnostics/tcpdump.pid)
              # Find the actual tcpdump process (child of timeout)
              ACTUAL_TCPDUMP_PID=$(pgrep -P $TCPDUMP_PID tcpdump || echo "")
              if [ -n "$ACTUAL_TCPDUMP_PID" ]; then
                sudo kill -TERM $ACTUAL_TCPDUMP_PID 2>/dev/null || true
              fi
              kill -TERM $TCPDUMP_PID 2>/dev/null || true
              sleep 1
            fi
            
            # Stop monitor script
            if [ -f ~/diagnostics/monitor.pid ]; then
              kill -TERM $(cat ~/diagnostics/monitor.pid) 2>/dev/null || true
            fi
            
            # Collect final stats
            netstat -s -p tcp | tee ~/diagnostics/tcp_stats_after.txt
            netstat -i | tee ~/diagnostics/interface_stats_after.txt
            
            # Analyze tcpdump if file exists and is valid
            if [ -f ~/diagnostics/github_traffic.pcap ] && [ -s ~/diagnostics/github_traffic.pcap ]; then
              echo "=== Packet Summary ===" | tee ~/diagnostics/pcap_analysis.txt
              sudo tcpdump -r ~/diagnostics/github_traffic.pcap -nn 2>/dev/null | wc -l | tee -a ~/diagnostics/pcap_analysis.txt || echo "0 packets captured"
              
              echo -e "\n=== TCP Flags Summary ===" | tee -a ~/diagnostics/pcap_analysis.txt
              sudo tcpdump -r ~/diagnostics/github_traffic.pcap -nn 2>/dev/null | grep -E "Flags \[" | head -20 | tee -a ~/diagnostics/pcap_analysis.txt || true
              
              echo -e "\n=== Connection Summary ===" | tee -a ~/diagnostics/pcap_analysis.txt
              sudo tcpdump -r ~/diagnostics/github_traffic.pcap -nn -q 2>/dev/null | head -50 | tee -a ~/diagnostics/pcap_analysis.txt || true
            else
              echo "No valid pcap file found or file is empty" | tee ~/diagnostics/pcap_analysis.txt
            fi

      - run:
          name: Generate summary report
          command: |
            echo "=== Network Diagnostics Summary ===" > ~/diagnostics/summary.txt
            echo "Resource Class: << parameters.resource_class >>" >> ~/diagnostics/summary.txt
            echo "Date: $(date)" >> ~/diagnostics/summary.txt
            echo "" >> ~/diagnostics/summary.txt
            echo "Checkout Duration: $(cat ~/diagnostics/checkout_duration.txt)" >> ~/diagnostics/summary.txt
            echo "" >> ~/diagnostics/summary.txt
            echo "=== TCP Statistics Diff ===" >> ~/diagnostics/summary.txt
            
            # Compare before/after TCP stats
            diff ~/diagnostics/tcp_stats_before.txt ~/diagnostics/tcp_stats_after.txt >> ~/diagnostics/summary.txt || true
            
            echo -e "\n=== Key Metrics ===" >> ~/diagnostics/summary.txt
            grep -E "retransmit|timeout|duplicate" ~/diagnostics/tcp_stats_after.txt >> ~/diagnostics/summary.txt || true

      - store_artifacts:
          path: ~/diagnostics
          destination: network-diagnostics

      - run:
          name: Check system logs (limited)
          command: |
            # Only recent logs to avoid too much data
            sudo tail -1000 /private/var/log/system.log > ~/diagnostics/system.log 2>/dev/null || true
            sudo tail -1000 /private/var/log/wifi.log > ~/diagnostics/wifi.log 2>/dev/null || true

workflows:
  workflow-mac:
    jobs:
      - mac-os:
          matrix:
            parameters:
              resource_class: ["macos.m1.medium.gen1", "m2pro.medium", "m2pro.large", "m4pro.medium"]